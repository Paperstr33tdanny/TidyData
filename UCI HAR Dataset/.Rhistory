x <-[3,4,5]
x <- vector(3,5,7,8)
help()
install.packages('')
\
install.packages()
install.pacakages('shiny')
install.packages('shiny')
sessionInfo()
install.packages(c("e1071", "shiny", "ggplot2", "mlbench", "jsonlite"))
install.packages('e')
clear
cl
cls
install.packages('caret')
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
solve(m)
m
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
cacheSolve$get()
cacheSolve$get(my_matrix)
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(my_matrix)
my_matrix$getinverse()
cacheSolve(my_matrix)
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
setwd("/Users/danielpetruk/Desktop/UCI\ HAR\ Dataset/")
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(data.table)
## Start data prep, load into memory
aLabel <- read.table("activity_labels.txt",quote="\"", stringsAsFactors=FALSE)
features <- read.table("features.txt", quote="\"", stringsAsFactors=FALSE)
Xtrain <- read.table("train/X_train.txt", quote="\"", stringsAsFactors=FALSE)
Ytrain <- read.table("train/y_train.txt", quote="\"", stringsAsFactors=FALSE)
Xtest <- read.table("test/X_test.txt", quote="\"", stringsAsFactors=FALSE)
Ytest <- read.table("test/y_test.txt", quote="\"", stringsAsFactors=FALSE)
#Merges the training and the test sets to create one data set.
XTotal <- bind_rows(Xtrain, Xtest)
YTotal <- bind_rows(Ytrain, Ytest)#Set the headers in the merged data set
names(XTotal) = features$V2
entireSet <- join(YTotal,XTotal)
View(entireSet)
entireSet <- rbind(YTotal,XTotal)
entireSet <- cbind(YTotal,XTotal)
View(entireSet)
setnames(entireSet, old = 'V1', new = 'Action')
View(entireSet)
reducedSet <-entireSet[ , grepl( "mean|std|Action" , names( entireSet ) ) ]
reducedSet <-entireSet[ , grepl( "mean|std|Action" , names( entireSet ) ) ]
View(reducedSet)
write.csv(reducedSet, file = "FinalSet.csv")
setwd("/Users/daniel/Desktop/UCI\ HAR\ Dataset/")
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(data.table)
## Start data prep, load into memory
aLabel <- read.table("activity_labels.txt",quote="\"", stringsAsFactors=FALSE)
features <- read.table("features.txt", quote="\"", stringsAsFactors=FALSE)
Xtrain <- read.table("train/X_train.txt", quote="\"", stringsAsFactors=FALSE)
Ytrain <- read.table("train/y_train.txt", quote="\"", stringsAsFactors=FALSE)
Xtest <- read.table("test/X_test.txt", quote="\"", stringsAsFactors=FALSE)
Ytest <- read.table("test/y_test.txt", quote="\"", stringsAsFactors=FALSE)
#Merges the training and the test sets to create one data set.
XTotal <- bind_rows(Xtrain, Xtest)
YTotal <- bind_rows(Ytrain, Ytest)#Set the headers in the merged data set
names(XTotal) = features$V2
entireSet <- cbind(Xtrain, Ytrain)
View(entireSet)
View(XTotal)
View(YTotal)
entireSet <- cbind(as.data.table(Xtest),(Ytest))
View(entireSet)
entireSet <- cbind(as.data.table(Ytest),(Xtest))
View(entireSet)
entireSet <- join(YTotal,XTotal)
View(entireSet)
entireSet2 <- join(entireSet, aLabel)
View(entireSet2)
entireSet <- merge(YTotal, XTotal, by="row.names", all.x=TRUE)
View(entireSet)
entireSet2 <- join(entireSet, aLabel)
View(entireSet2)
entireSet <- merge(YTotal, XTotal, by="row.names", all.x=TRUE)
s3 <- join(YTotal, aLabel)
entireSet1 <- merge(s3, entireSet, by="row.names", all.x=TRUE)
s3 <- join(entireSet, aLabel)
View(s3)
View(entireSet)
entireSet <- merge(YTotal, XTotal, by="row_number", all.x=TRUE)
View(entireSet)
setwd("/Users/daniel/Desktop/UCI\ HAR\ Dataset/")
library(plyr)
library(dplyr)
library(tidyr)
library(reshape2)
library(data.table)
## Start data prep, load into memory
aLabel <- read.table("activity_labels.txt",quote="\"", stringsAsFactors=FALSE)
features <- read.table("features.txt", quote="\"", stringsAsFactors=FALSE)
Xtrain <- read.table("train/X_train.txt", quote="\"", stringsAsFactors=FALSE)
Ytrain <- read.table("train/y_train.txt", quote="\"", stringsAsFactors=FALSE)
Xtest <- read.table("test/X_test.txt", quote="\"", stringsAsFactors=FALSE)
Ytest <- read.table("test/y_test.txt", quote="\"", stringsAsFactors=FALSE)
#Merges the training and the test sets to create one data set.
XTotal <- bind_rows(Xtrain, Xtest)
YTotal <- bind_rows(Ytrain, Ytest)
#Set the headers in the merged data set
names(XTotal) = features$V2
View(XTotal)
View(YTotal)
row
entireSet <- merge(YTotal, XTotal, by="row_number", all.x=TRUE)
View(entireSet)
entireSet <- merge(YTotal, XTotal, by="row_number", all.x=TRUE)
s3 <- join(YTotal, aLabel)
View(s3)
entireSet <- merge(s3, XTotal, by="row", all.x=TRUE)
View(entireSet)
entireSet <- merge(s3, XTotal, by="row.names", all.x=TRUE)
View(entireSet)
setnames(entireSet, old = 'V2', new = 'Action')
View(entireSet)
reducedSet <-entireSet[ , grepl( "mean|std|Action" , names( entireSet ) ) ]
View(reducedSet)
write.csv(reducedSet, file = "FinalSet.csv")
reducedSet <-entireSet[ , grepl( "mean|std" , names( entireSet ) ) ]
View(reducedSet)
write.csv(reducedSet, file = "FinalSet.csv")
